/*
* Generated on Thursday, January 14, 2021 at 2:21:40 PM Pacific Standard Time
* Operating System: Version 14.2 (Build 18B92)
* Image Source: /System/Library/Frameworks/EventKit.framework/EventKit
*/

#import <EventKit/EventKit-Structs.h>
#import <EventKit/EKCalendarItem.h>
#import <libobjc.A.dylib/EKJunkInvitationProtocol_Private.h>
#import <libobjc.A.dylib/CalDateRangeProtocol.h>

@class NSString, EKEventStore, EKStructuredLocation, NSDate, EKReadWriteLock, EKCalendarDate, NSNumber, IPEventClassificationType, NSArray, IPMessageUnit, EKRecurrenceIdentifier, EKSuggestedEventInfo, NSURL, NSSet, EKParticipant;

@interface EKEvent : EKCalendarItem <EKJunkInvitationProtocol_Private, CalDateRangeProtocol> {

	EKStructuredLocation* _cachedLocationPrediction;
	NSDate* _cachedLocationPredictionExpirationDate;
	BOOL _locationPredictionFrozen;
	BOOL _locationPredictionAllowed;
	EKReadWriteLock* _locationPredictionLock;
	BOOL _occurrenceIsAllDay;
	BOOL _requiresDetachDueToSnoozedAlarm;
	BOOL _currentUserInvitedAttendee;
	int _clearModifiedFlags;
	NSString* _birthdayPersonUniqueID;
	EKCalendarDate* _occurrenceStartDate;
	EKCalendarDate* _occurrenceEndDate;
	EKCalendarDate* _originalOccurrenceStartDate;
	EKCalendarDate* _originalOccurrenceEndDate;
	NSNumber* _originalOccurrenceIsAllDay;
	NSDate* _proposedEndDate;

}

@property (assign) BOOL ipsos_isTimeApproximate; 
@property (assign) BOOL ipsos_isEndTimeApproximate; 
@property (assign) BOOL ipsos_usesDefaultClassificationTypeStartTime; 
@property (assign) BOOL ipsos_isDateTimeTenseDependent; 
@property (assign) BOOL ipsos_timeNeedsMeridianGuess; 
@property (assign) BOOL ipsos_isEventTimeOnlyAndReferrengingToSentDate; 
@property (assign) BOOL ipsos_isTimeOffset; 
@property (assign) BOOL ipsos_allDayPreferred; 
@property (assign) BOOL ipsos_disableTimeAdjustment; 
@property (assign) unsigned long long ipsos_usedBubblesCount; 
@property (assign) double ipsos_confidence; 
@property (assign) double ipsos_experimentalConfidence; 
@property (readonly) double ipsos_duration; 
@property (retain) IPEventClassificationType * ipsos_eventClassificationType; 
@property (retain) NSArray * ipsos_dataFeatures; 
@property (retain) IPMessageUnit * ipsos_messageUnit; 
@property (assign) unsigned long long ipsos_eventStatus; 
@property (assign) unsigned long long ipsos_eventAttributes; 
@property (nonatomic,retain) NSArray * locations; 
@property (nonatomic,readonly) NSArray * locationsWithoutPrediction; 
@property (nonatomic,copy) EKCalendarDate * occurrenceStartDate;                                                 //@synthesize occurrenceStartDate=_occurrenceStartDate - In the implementation block
@property (nonatomic,copy) EKCalendarDate * occurrenceEndDate;                                                   //@synthesize occurrenceEndDate=_occurrenceEndDate - In the implementation block
@property (assign,nonatomic) BOOL occurrenceIsAllDay;                                                            //@synthesize occurrenceIsAllDay=_occurrenceIsAllDay - In the implementation block
@property (nonatomic,copy) EKCalendarDate * originalOccurrenceStartDate;                                         //@synthesize originalOccurrenceStartDate=_originalOccurrenceStartDate - In the implementation block
@property (nonatomic,copy) EKCalendarDate * originalOccurrenceEndDate;                                           //@synthesize originalOccurrenceEndDate=_originalOccurrenceEndDate - In the implementation block
@property (nonatomic,copy) NSNumber * originalOccurrenceIsAllDay;                                                //@synthesize originalOccurrenceIsAllDay=_originalOccurrenceIsAllDay - In the implementation block
@property (assign,nonatomic) BOOL requiresDetachDueToSnoozedAlarm;                                               //@synthesize requiresDetachDueToSnoozedAlarm=_requiresDetachDueToSnoozedAlarm - In the implementation block
@property (assign,nonatomic) int clearModifiedFlags;                                                             //@synthesize clearModifiedFlags=_clearModifiedFlags - In the implementation block
@property (nonatomic,readonly) EKRecurrenceIdentifier * recurrenceIdentifier; 
@property (nonatomic,readonly) NSDate * recurrenceDate; 
@property (nonatomic,readonly) NSString * eventOccurrenceID; 
@property (assign,nonatomic) long long privacyLevel; 
@property (nonatomic,readonly) BOOL locationIsAConferenceRoom; 
@property (nonatomic,readonly) double duration; 
@property (assign,nonatomic) double travelTime; 
@property (nonatomic,readonly) NSDate * startDateIncludingTravel; 
@property (nonatomic,readonly) BOOL isStartDateDirty; 
@property (nonatomic,readonly) BOOL isEndDateDirty; 
@property (nonatomic,readonly) BOOL allowsTravelTimeModifications; 
@property (nonatomic,readonly) BOOL allowsAllDayModifications; 
@property (nonatomic,retain) EKStructuredLocation * travelStartLocation; 
@property (nonatomic,retain) EKStructuredLocation * endLocation; 
@property (nonatomic,readonly) BOOL automaticLocationGeocodingAllowed; 
@property (assign,nonatomic) long long travelAdvisoryBehavior; 
@property (nonatomic,readonly) BOOL travelAdvisoryBehaviorIsEffectivelyEnabled; 
@property (nonatomic,readonly) BOOL eligibleForTravelAdvisories; 
@property (nonatomic,readonly) BOOL potentiallyEligibleForTravelAdvisories; 
@property (nonatomic,retain) EKSuggestedEventInfo * suggestionInfo; 
@property (nonatomic,readonly) NSString * locationWithoutPrediction; 
@property (nonatomic,readonly) EKStructuredLocation * preferredLocationWithoutPrediction; 
@property (nonatomic,retain) NSDate * proposedStartDate; 
@property (nonatomic,retain) NSDate * proposedEndDate;                                                           //@synthesize proposedEndDate=_proposedEndDate - In the implementation block
@property (nonatomic,readonly) BOOL allowsProposedTimeModifications; 
@property (nonatomic,readonly) BOOL allowsResponseCommentModifications; 
@property (assign,nonatomic) BOOL isPhantom; 
@property (assign,nonatomic) unsigned long long cachedJunkStatus; 
@property (nonatomic,readonly) BOOL isSignificantlyDetached; 
@property (nonatomic,readonly) BOOL isSignificantlyDetachedIgnoringParticipation; 
@property (nonatomic,readonly) BOOL hasComplexRecurrence; 
@property (nonatomic,readonly) NSDate * originalStartDate; 
@property (nonatomic,readonly) NSString * UUID; 
@property (nonatomic,retain) NSURL * conferenceURL; 
@property (nonatomic,readonly) NSURL * externalURL; 
@property (nonatomic,readonly) BOOL isEditable; 
@property (nonatomic,readonly) BOOL isPrivateEventSharedToMe; 
@property (nonatomic,readonly) NSURL * launchURL; 
@property (assign,nonatomic) long long participationStatus; 
@property (nonatomic,readonly) long long pendingParticipationStatus; 
@property (nonatomic,readonly) BOOL allowsParticipationStatusModifications; 
@property (nonatomic,readonly) long long currentUserGeneralizedParticipantRole; 
@property (getter=isCurrentUserInvitedAttendee,nonatomic,readonly) BOOL currentUserInvitedAttendee;              //@synthesize currentUserInvitedAttendee=_currentUserInvitedAttendee - In the implementation block
@property (nonatomic,readonly) BOOL allowsAvailabilityModifications; 
@property (nonatomic,readonly) BOOL allowsPrivacyLevelModifications; 
@property (nonatomic,readonly) BOOL allowsParticipantStatusModifications; 
@property (nonatomic,retain) NSDate * participationStatusModifiedDate; 
@property (nonatomic,readonly) BOOL supportsParticipationStatusModificationsWithoutNotification; 
@property (assign,nonatomic) long long status; 
@property (assign,nonatomic) unsigned long long invitationStatus; 
@property (assign,nonatomic) BOOL isAlerted; 
@property (assign,nonatomic) BOOL dateChanged; 
@property (assign,nonatomic) BOOL timeChanged; 
@property (assign,nonatomic) BOOL titleChanged; 
@property (assign,nonatomic) BOOL locationChanged; 
@property (assign,nonatomic) BOOL attendeeComment; 
@property (assign,nonatomic) BOOL attendeeStatus; 
@property (assign,nonatomic) BOOL attendeeProposedStartDate; 
@property (assign,nonatomic) BOOL attendeeDeclinedStartDate; 
@property (assign,nonatomic) BOOL attendeeReplyChanged; 
@property (assign,nonatomic) int externalTrackingStatus; 
@property (nonatomic,copy,readonly) NSDate * initialStartDate; 
@property (nonatomic,copy,readonly) NSDate * initialEndDate; 
@property (nonatomic,readonly) BOOL isMaster; 
@property (nonatomic,readonly) BOOL isMasterOrDetachedOccurrence; 
@property (nonatomic,readonly) BOOL isStatusDirty; 
@property (nonatomic,readonly) BOOL isAllDayDirty; 
@property (nonatomic,readonly) EKCalendarDate * startCalendarDateIncludingTravelTime; 
@property (nonatomic,readonly) double durationIncludingTravel; 
@property (nonatomic,readonly) long long travelRoutingMode; 
@property (nonatomic,readonly) BOOL canBeRespondedTo; 
@property (nonatomic,readonly) BOOL canDetachSingleOccurrence; 
@property (nonatomic,readonly) BOOL hasAttachmentChanges; 
@property (nonatomic,readonly) EKCalendarDate * startCalendarDate; 
@property (nonatomic,readonly) EKCalendarDate * endCalendarDate; 
@property (assign,nonatomic) long long locationPredictionState; 
@property (nonatomic,readonly) BOOL hasPredictedLocation; 
@property (assign,nonatomic) BOOL firedTTL; 
@property (nonatomic,readonly) BOOL responseMustApplyToAll; 
@property (assign,nonatomic) unsigned long long junkStatus; 
@property (nonatomic,copy) NSSet * actions; 
@property (getter=isPrivacySet,nonatomic,readonly) BOOL privacySet; 
@property (nonatomic,copy) NSString * recurrenceSet; 
@property (nonatomic,readonly) NSString * eventIdentifier; 
@property (assign,getter=isAllDay,nonatomic) BOOL allDay; 
@property (nonatomic,copy) NSDate * startDate; 
@property (nonatomic,copy) NSDate * endDate; 
@property (nonatomic,copy) EKStructuredLocation * structuredLocation; 
@property (nonatomic,readonly) EKParticipant * organizer; 
@property (assign,nonatomic) long long availability; 
@property (nonatomic,readonly) BOOL isDetached; 
@property (nonatomic,readonly) NSDate * occurrenceDate; 
@property (nonatomic,readonly) NSString * birthdayContactIdentifier; 
@property (nonatomic,readonly) long long birthdayPersonID; 
@property (nonatomic,readonly) NSString * birthdayPersonUniqueID;                                                //@synthesize birthdayPersonUniqueID=_birthdayPersonUniqueID - In the implementation block
@property (nonatomic,readonly) NSString * sendersEmail; 
@property (nonatomic,readonly) NSString * sendersPhoneNumber; 
@property (nonatomic,readonly) BOOL supportsJunkReporting; 
@property (nonatomic,readonly) EKEventStore * eventStore; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)EKObjectChangeSummarizer_singleValueDiffKeys;
+(id)EKObjectChangeSummarizer_multiValueDiffKeys;
+(long long)_eventAvailabilityForParticipantStatus:(long long)arg1 supportedEventAvailabilities:(unsigned long long)arg2 isAllDayEvent:(BOOL)arg3 ;
+(id)_updatedPredictedLocationRespectingTimeoutBudgetForEvent:(id)arg1 error:(id*)arg2 ;
+(id)_basicChangesRequiringSpanAll;
+(id)_relatedCachedTimeKeys;
+(BOOL)isMultiDayTimedEventWithStartDate:(id)arg1 endDate:(id)arg2 allDay:(BOOL)arg3 inCalendar:(id)arg4 ;
+(id)generateUniqueIDWithEvent:(id)arg1 originalEvent:(id)arg2 calendar:(id)arg3 ;
+(id)knownKeysToSkipForFutureChanges;
+(id)knownKeysToUseForFutureChanges;
+(long long)_coercedEventAvailabilityForDesiredAvailability:(long long)arg1 supportedAvailabilities:(unsigned long long)arg2 ;
+(id)knownRequireRSVPKeys;
+(id)knownPerUserPropertyKeys;
+(id)externalUriScheme;
+(BOOL)_calendarsAreSharedToMeInSameSourceAndHaveSameOwner:(id)arg1 ;
+(id)knownRelationshipMultiValueKeys;
+(id)knownRelationshipSingleValueKeys;
+(id)knownSingleValueKeysForComparison;
+(id)_locationStringForLocations:(id)arg1 ;
+(Class)frozenClass;
+(id)eventWithEventStore:(id)arg1 ;
-(unsigned long long)ipsos_eventStatus;
-(unsigned long long)ipsos_usedBubblesCount;
-(double)ipsos_confidence;
-(unsigned long long)ipsos_eventAttributes;
-(IPMessageUnit *)ipsos_messageUnit;
-(IPEventClassificationType *)ipsos_eventClassificationType;
-(BOOL)ipsos_isTimeApproximate;
-(BOOL)ipsos_isDateTimeTenseDependent;
-(void)setIpsos_isDateTimeTenseDependent:(BOOL)arg1 ;
-(NSArray *)ipsos_dataFeatures;
-(void)setIpsos_dataFeatures:(NSArray *)arg1 ;
-(BOOL)ipsos_isEndTimeApproximate;
-(void)setIpsos_isEndTimeApproximate:(BOOL)arg1 ;
-(void)setIpsos_disableTimeAdjustment:(BOOL)arg1 ;
-(BOOL)ipsos_timeNeedsMeridianGuess;
-(BOOL)ipsos_allDayPreferred;
-(BOOL)ipsos_isTimeOffset;
-(BOOL)ipsos_isEventTimeOnlyAndReferrengingToSentDate;
-(double)ipsos_duration;
-(void)setIpsos_eventAttributes:(unsigned long long)arg1 ;
-(BOOL)ipsos_usesDefaultClassificationTypeStartTime;
-(void)setIpsos_eventClassificationType:(IPEventClassificationType *)arg1 ;
-(void)setIpsos_usesDefaultClassificationTypeStartTime:(BOOL)arg1 ;
-(void)setIpsos_isTimeApproximate:(BOOL)arg1 ;
-(void)setIpsos_confidence:(double)arg1 ;
-(void)setIpsos_messageUnit:(IPMessageUnit *)arg1 ;
-(void)setIpsos_eventStatus:(unsigned long long)arg1 ;
-(void)setIpsos_timeNeedsMeridianGuess:(BOOL)arg1 ;
-(void)setIpsos_isEventTimeOnlyAndReferrengingToSentDate:(BOOL)arg1 ;
-(void)setIpsos_isTimeOffset:(BOOL)arg1 ;
-(void)setIpsos_allDayPreferred:(BOOL)arg1 ;
-(BOOL)ipsos_disableTimeAdjustment;
-(void)setIpsos_experimentalConfidence:(double)arg1 ;
-(void)setIpsos_usedBubblesCount:(unsigned long long)arg1 ;
-(double)ipsos_experimentalConfidence;
-(id)ipsos_betterDescription;
-(BOOL)validate:(id*)arg1 ;
-(NSArray *)locations;
-(BOOL)isEditable;
-(void)setActions:(NSSet *)arg1 ;
-(void)setProposedStartDate:(NSDate *)arg1 ;
-(unsigned long long)entityType;
-(BOOL)isBirthday;
-(BOOL)isFloating;
-(double)travelTime;
-(BOOL)phantomMaster;
-(void)setTravelTime:(double)arg1 ;
-(NSDate *)endDate;
-(BOOL)refresh;
-(void)setAllDay:(BOOL)arg1 ;
-(NSString *)eventIdentifier;
-(BOOL)isTentative;
-(void)setLocations:(NSArray *)arg1 ;
-(BOOL)isMaster;
-(void)setSuggestionInfo:(EKSuggestedEventInfo *)arg1 ;
-(void)setEndDateRaw:(id)arg1 ;
-(BOOL)isProposedTimeEvent;
-(id)startDateRaw;
-(BOOL)_isAllDay;
-(id)externalURI;
-(void)setTimeZone:(id)arg1 ;
-(void)setCalendar:(id)arg1 ;
-(BOOL)isAllDay;
-(EKCalendarDate *)originalOccurrenceStartDate;
-(void)setOccurrenceIsAllDay:(BOOL)arg1 ;
-(void)setOccurrenceEndDate:(EKCalendarDate *)arg1 ;
-(id)effectiveTimeZone;
-(BOOL)occurrenceIsAllDay;
-(id)_adjustedPersistedDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2 pinMode:(unsigned long long)arg3 clientCalendarDate:(id*)arg4 ;
-(void)setOccurrenceStartDate:(EKCalendarDate *)arg1 ;
-(id)_calculateDurationWithStart:(id)arg1 end:(id)arg2 allDay:(BOOL)arg3 ;
-(NSString *)eventOccurrenceID;
-(EKRecurrenceIdentifier *)recurrenceIdentifier;
-(EKCalendarDate *)occurrenceStartDate;
-(void)setIsPhantom:(BOOL)arg1 ;
-(EKCalendarDate *)originalOccurrenceEndDate;
-(void)_clearLocationPredictionCacheIfNotFrozen;
-(id)_committedStartDate;
-(void)setOriginalOccurrenceIsAllDay:(NSNumber *)arg1 ;
-(void)_updateDefaultAlarms;
-(void)_updateEndDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2 ;
-(void)setStartDate:(NSDate *)arg1 ;
-(void)_updateStartDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2 ;
-(void)forceSetTimeZone:(id)arg1 ;
-(void)clearCachedTimeValues;
-(NSDate *)startDateIncludingTravel;
-(void)_setStartDate:(id)arg1 andClearProposedTimes:(BOOL)arg2 ;
-(EKCalendarDate *)occurrenceEndDate;
-(id)_pinDate:(id)arg1 withPinMode:(unsigned long long)arg2 ;
-(void)setOriginalOccurrenceStartDate:(EKCalendarDate *)arg1 ;
-(void)setOriginalOccurrenceEndDate:(EKCalendarDate *)arg1 ;
-(NSDate *)proposedStartDate;
-(void)setStartDateRaw:(id)arg1 ;
-(id)init;
-(BOOL)_settingTimeZoneChangesStartEndDates;
-(BOOL)_isOriginalOccurrenceStartDateSameAsCommittedStartDate;
-(BOOL)allowsParticipationStatusModifications;
-(BOOL)allowsAvailabilityModifications;
-(BOOL)currentUserMayActAsOrganizer;
-(void)_removeDefaultAlarms;
-(void)_addDefaultAlarms;
-(void)_setInvitationStatusAlertedIfNecessary;
-(void)_setInvitationStatusUnalertedIfNecessary;
-(BOOL)_shouldAlertInviteeDeclines;
-(id)privacyDescription;
-(id)roomAttendees;
-(BOOL)allowsPrivacyLevelModifications;
-(void)removeConferenceRooms:(id)arg1 ;
-(BOOL)_invitationChangedPropertyForFlag:(unsigned)arg1 ;
-(void)_setInvitationChangedProperty:(BOOL)arg1 forFlag:(unsigned)arg2 ;
-(BOOL)serverSupportedProposeNewTime;
-(BOOL)isAlerted;
-(void)setPredictedLocationFrozen:(BOOL)arg1 ;
-(id)_updatePredictedLocationCacheIfNeeded;
-(id)_conferenceRoomDisplayStrings;
-(NSSet *)actions;
-(void)setStructuredLocation:(id)arg1 preserveConferenceRooms:(BOOL)arg2 ;
-(BOOL)_needsPredictedLocationCacheUpdateHoldingLock;
-(BOOL)isAllDayDirty;
-(id)_firstNonConferenceRoomLocationTitle;
-(BOOL)isPrivacySet;
-(id)_updatePredictedLocationCacheIfNeededHoldingLock;
-(void)_clearLocationPredictionCacheIfNotFrozenHoldingLock;
-(BOOL)isPrivateEventSharedToMe;
-(BOOL)hasAttachmentChanges;
-(BOOL)_hasBasicChangesRequiringSpanAll;
-(BOOL)_hasRecurrenceRuleChangeRequiringSpanAll;
-(BOOL)_hasOrHadRecurrenceRule;
-(BOOL)_eligibleForTravelAdvisoriesIncludePotential:(BOOL)arg1 ;
-(BOOL)automaticLocationGeocodingAllowed;
-(long long)daysSpannedInCalendar:(id)arg1 ;
-(id)startOfDayForStartDateInCalendar:(id)arg1 ;
-(long long)pendingParticipationStatus;
-(BOOL)hasValidEventAction;
-(BOOL)_hasExternalIDOrDeliverySource;
-(id)_travelTimeInternalDescription;
-(int)clearModifiedFlags;
-(void)setClearModifiedFlags:(int)arg1 ;
-(EKStructuredLocation *)endLocation;
-(BOOL)validateAndUpdateOccurrenceDateFieldsAfterRefresh;
-(void)postModifiedNotification;
-(id)_committedEndDate;
-(EKCalendarDate *)startCalendarDate;
-(void)setRequiresDetachDueToSnoozedAlarm:(BOOL)arg1 ;
-(BOOL)validateWithSpan:(long long)arg1 error:(id*)arg2 ;
-(BOOL)_isParticipationStatusDirty;
-(BOOL)responseMustApplyToAll;
-(BOOL)validateRecurrenceRule:(id)arg1 error:(id*)arg2 ;
-(BOOL)_validateDatesAndRecurrencesGivenSpan:(long long)arg1 error:(id*)arg2 ;
-(void)_adjustForNewCalendarBeforeCommit;
-(BOOL)requiresDetachDueToSnoozedAlarm;
-(BOOL)_isSimpleRepeatingEvent;
-(void)setTravelAdvisoryBehavior:(long long)arg1 ;
-(void)_detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(BOOL)arg3 ;
-(BOOL)conformsToRecurrenceRules:(id)arg1 ;
-(void)_filterExceptionDates;
-(void)_deleteThisOccurrence;
-(BOOL)_isSignificantlyDetachedComparedToMaster:(id)arg1 shouldIgnorePartStat:(BOOL)arg2 ;
-(void)_clearExceptionDatesAndUpdateDetachedOriginalDates;
-(void)_propagateChangesToDetachedEvents:(id)arg1 significantlyDetachedEvents:(id)arg2 startDateOffset:(id)arg3 duration:(id)arg4 calendar:(id)arg5 ;
-(void)_applyTimeChangesToMaster;
-(void)_updateModifiedPropertiesForThisEventAndAllDetachments;
-(void)_updateModifiedProperties;
-(void)setPhantomMaster:(BOOL)arg1 ;
-(id)masterEvent;
-(id)_updateMasterDate:(id)arg1 forChangeToOccurrenceDate:(id)arg2 fromOriginalOccurrenceDate:(id)arg3 ;
-(void)_addOrganizerToRecentsIfNeeded;
-(void)_addNewAttendeesToRecentsIfNeeded;
-(void)_clearOriginalDateFields;
-(NSNumber *)originalOccurrenceIsAllDay;
-(BOOL)_deleteWithSpan:(long long)arg1 error:(id*)arg2 ;
-(id)_keysToChangeForDuplicateWithOptions:(long long)arg1 ;
-(BOOL)_occurrenceExistsOnDate:(id)arg1 timeZone:(id)arg2 ;
-(BOOL)_checkStartDateConstraintAgainstDate:(SCD_Struct_EK5)arg1 timeZone:(id)arg2 error:(id*)arg3 ;
-(BOOL)durationOverlapsRecurrenceInterval;
-(BOOL)_cancelWithSpan:(long long)arg1 error:(id*)arg2 ;
-(BOOL)overlapsWithOrIsSameDayAsEventInSeries;
-(BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(long long)arg1 ;
-(BOOL)isFirstOccurrence;
-(void)_deleteFromOccurrenceDateOnward:(id)arg1 ;
-(void)_updateSelfFromDetachedEventIfNeededForDelete;
-(void)_cancelDetachedEventsWithSpan:(long long)arg1 ;
-(BOOL)_eventIsTheOnlyRemainingOccurrence;
-(BOOL)_noRemainingEarlierOccurrences;
-(BOOL)_shouldCancelInsteadOfDeleteWithSpan:(long long)arg1 ;
-(BOOL)_shouldDeclineInsteadOfDelete;
-(BOOL)_shouldPreserveFutureWhenSlicingWithStartDate:(id)arg1 newStartDate:(id)arg2 ;
-(void)setAttendeeComment:(BOOL)arg1 ;
-(void)setNotes:(id)arg1 ;
-(BOOL)updateEventToEvent:(id)arg1 commit:(BOOL)arg2 ;
-(id)diffFromCommitted;
-(id)potentialConflictOccurrenceDatesInTimePeriod:(double*)arg1 ;
-(BOOL)_fetchedEventIsConflict:(id)arg1 forStartDate:(id)arg2 endDate:(id)arg3 ;
-(BOOL)isStatusDirty;
-(void)_clearAttendeeChangedFlags;
-(void)setAttendeeStatus:(BOOL)arg1 ;
-(void)setAttendeeProposedStartDate:(BOOL)arg1 ;
-(void)setAttendeeDeclinedStartDate:(BOOL)arg1 ;
-(BOOL)isDifferentWithDiff:(id)arg1 ;
-(BOOL)_diff:(id)arg1 isDifferentFromCommittedEventHelperRequiresReschedule:(BOOL)arg2 ;
-(void)setOriginalStartDate:(NSDate *)arg1 ;
-(long long)currentUserGeneralizedParticipantRole;
-(BOOL)isDifferentAndModifiedAttendeesWithDiff:(id)arg1 ;
-(BOOL)isDifferentAndRequiresRescheduleWithDiff:(id)arg1 ;
-(BOOL)isDifferentAndRequiresRSVPWithDiff:(id)arg1 ;
-(BOOL)seriesHasOutOfOrderEvents;
-(BOOL)isDifferentAndHasUnscheduledAttendeesWithDiff:(id)arg1 ;
-(long long)requirementsToMoveFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(BOOL)_requirementsToMoveOrCopyToCalendarHelperAllowedToMoveOrCopyEventFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(double)durationIncludingTravel;
-(BOOL)_requirementsToMoveToCalendarHelperDuplicationRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(id)lunarCalendarString;
-(void)rebase;
-(long long)travelAdvisoryBehavior;
-(BOOL)_requirementsToMoveToCalendarHelperAlterationsRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(BOOL)hasComplexRecurrence;
-(NSURL *)conferenceURL;
-(NSDate *)startDate;
-(BOOL)_requirementsToMoveToCalendarHelperReinviteAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(BOOL)_requirementsToMoveToCalendarHelperNeedToRemoveOriginalToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(EKCalendarDate *)endCalendarDate;
-(BOOL)_requirementsToMoveToCalendarHelperRemoveAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(void)overrideStartDate:(id)arg1 ;
-(BOOL)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 allowedRequirements:(long long)arg3 error:(id*)arg4 ;
-(BOOL)seriesHasOverlappingOrOnSameDayOrOutOfOrderEvents;
-(void)setEndLocation:(EKStructuredLocation *)arg1 ;
-(BOOL)_canMoveOrCopyFromCalendar:(id)arg1 toCalendar:(id)arg2 allowedRequirements:(long long)arg3 error:(id*)arg4 ;
-(id)suggestedStartDateForCurrentRecurrenceRule;
-(BOOL)_suggestedStartDateHelperRecurrenceRuleRequiresExpansion:(id)arg1 forDate:(id)arg2 ;
-(BOOL)_hasAbsoluteAlarms;
-(BOOL)isValidAttendee:(id)arg1 forCalendar:(id)arg2 ;
-(BOOL)isCurrentUserInvitedAttendee;
-(EKCalendarDate *)startCalendarDateIncludingTravelTime;
-(BOOL)supportsParticipationStatusModificationsWithoutNotification;
-(long long)birthdayPersonID;
-(BOOL)allowsParticipantStatusModifications;
-(BOOL)_userAddressesRepresentInvitedAttendee:(id)arg1 checkEmailAddresses:(BOOL)arg2 ;
-(void)addEventAction:(id)arg1 ;
-(void)markEventAsAttendeeForward;
-(long long)_parentParticipationStatus;
-(void)makeRecurrenceEndDateBased;
-(void)makeRecurrenceEndCountBased;
-(void)clearInvitationStatus;
-(void)removeEventAction:(id)arg1 ;
-(void)setIsAlerted:(BOOL)arg1 ;
-(NSDate *)proposedEndDate;
-(long long)travelRoutingMode;
-(BOOL)attendeeComment;
-(BOOL)allowsTravelTimeModifications;
-(BOOL)allowsAllDayModifications;
-(BOOL)attendeeStatus;
-(BOOL)attendeeProposedStartDate;
-(BOOL)canBeRespondedTo;
-(BOOL)isDetached;
-(BOOL)attendeeDeclinedStartDate;
-(BOOL)allowsProposedTimeModifications;
-(BOOL)supportsAddingAttachments;
-(void)addConferenceRooms:(id)arg1 ;
-(void)confirmPredictedLocation:(id)arg1 ;
-(void)rejectPredictedLocation;
-(void)setLocationPredictionAllowed:(BOOL)arg1 ;
-(BOOL)canDetachSingleOccurrence;
-(long long)compareStartDateIncludingTravelWithEvent:(id)arg1 ;
-(BOOL)changingAllDayPropertyIsAllowed;
-(BOOL)hasChangesRequiringSpanAll;
-(BOOL)potentiallyEligibleForTravelAdvisories;
-(BOOL)travelAdvisoryBehaviorIsEffectivelyEnabled;
-(id)startOfDayForEndDateInCalendar:(id)arg1 ;
-(BOOL)isMultiDayTimedEventInCalendar:(id)arg1 ;
-(BOOL)commitWithSpan:(long long)arg1 error:(id*)arg2 ;
-(BOOL)isSignificantlyDetached;
-(BOOL)hasAttendeeProposedTimes;
-(void)setURL:(id)arg1 ;
-(BOOL)isSignificantlyDetachedIgnoringParticipation;
-(id)duplicateWithOptions:(long long)arg1 ;
-(unsigned long long)countOfAttendeeProposedTimes;
-(BOOL)isMainOccurrence;
-(BOOL)allowsResponseCommentModifications;
-(BOOL)removeWithSpan:(long long)arg1 error:(id*)arg2 ;
-(BOOL)isOnlyOccurrence;
-(id)privacyLevelString;
-(BOOL)updateEventToEvent:(id)arg1 ;
-(void)setInvitationChangedProperties:(unsigned)arg1 ;
-(id)scanForConflicts;
-(BOOL)updateWithGeocodedMapItemAndSaveWithCommit:(id)arg1 eventStore:(id)arg2 error:(id*)arg3 ;
-(BOOL)isEqual:(id)arg1 comparingKeys:(id)arg2 ;
-(void)dismissAcceptedProposeNewTimeNotification;
-(BOOL)isDifferentAndHasForwardedAttendeesWithDiff:(id)arg1 ;
-(void)setProposedEndDate:(NSDate *)arg1 ;
-(BOOL)isDifferentAndHasNewProposedTimeWithDiff:(id)arg1 ;
-(BOOL)isDifferentExceptingPerUserPropertiesWithDiff:(id)arg1 ;
-(NSString *)birthdayPersonUniqueID;
-(BOOL)isDifferentFromCommittedEventAndRequiresReschedule;
-(BOOL)isDifferentFromCommittedEventAndRequiresRSVP;
-(BOOL)isDifferentFromCommittedEventAndHasUnscheduledAttendees;
-(long long)requirementsToMoveToCalendar:(id)arg1 ;
-(BOOL)requiresCopyToMoveFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(long long)compareStartDateWithEvent:(id)arg1 ;
-(void)setTitle:(id)arg1 ;
-(void)setEndDate:(NSDate *)arg1 ;
-(long long)privacyLevel;
-(void)setPrivacyLevel:(long long)arg1 ;
-(long long)locationPredictionState;
-(void)setLocationPredictionState:(long long)arg1 ;
-(void)setRecurrenceSet:(NSString *)arg1 ;
-(void)setNeedsOccurrenceCacheUpdate:(BOOL)arg1 ;
-(BOOL)disallowProposeNewTime;
-(BOOL)canForward;
-(BOOL)hasPredictedLocation;
-(id)responseComment;
-(NSString *)description;
-(id)birthdayContactName;
-(BOOL)locationIsAConferenceRoom;
-(EKSuggestedEventInfo *)suggestionInfo;
-(NSURL *)launchURL;
-(void)setConferenceURL:(NSURL *)arg1 ;
-(long long)availability;
-(EKStructuredLocation *)structuredLocation;
-(id)initWithPersistentObject:(id)arg1 occurrenceDate:(id)arg2 ;
-(id)initWithPersistentObject:(id)arg1 ;
-(BOOL)couldBeJunk;
-(BOOL)dateChanged;
-(void)setDateChanged:(BOOL)arg1 ;
-(BOOL)timeChanged;
-(void)setTimeChanged:(BOOL)arg1 ;
-(BOOL)locationChanged;
-(void)setLocationChanged:(BOOL)arg1 ;
-(BOOL)titleChanged;
-(void)setTitleChanged:(BOOL)arg1 ;
-(id)_dateForNextOccurrence;
-(void)setAvailability:(long long)arg1 ;
-(id)recurrenceRule;
-(id)initWithObjectForCopy:(id)arg1 ;
-(id)birthdayID;
-(void)markAsCommitted;
-(id)committedValueForKey:(id)arg1 ;
-(void)markAsSaved;
-(NSDate *)initialStartDate;
-(NSDate *)initialEndDate;
-(NSDate *)participationStatusModifiedDate;
-(NSString *)locationWithoutPrediction;
-(EKStructuredLocation *)preferredLocationWithoutPrediction;
-(BOOL)eligibleForTravelAdvisories;
-(void)setParticipationStatusModifiedDate:(NSDate *)arg1 ;
-(unsigned long long)hash;
-(void)reset;
-(id)endDateRaw;
-(id)specificIdentifier;
-(void)_resetInternalState;
-(unsigned)invitationChangedProperties;
-(BOOL)revert;
-(id)uniqueId;
-(unsigned long long)junkStatus;
-(NSDate *)originalStartDate;
-(void)setInvitationStatus:(unsigned long long)arg1 ;
-(void)setBirthdayContactIdentifier:(NSString *)arg1 ;
-(void)setStructuredLocation:(EKStructuredLocation *)arg1 ;
-(BOOL)_reset;
-(void)setStatus:(long long)arg1 ;
-(id)defaultAlarms;
-(BOOL)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id*)arg3 ;
-(BOOL)canMoveOrCopyToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id*)arg3 ;
-(id)_generateNewUniqueID;
-(BOOL)requiresDetach;
-(NSString *)birthdayContactIdentifier;
-(void)_adjustAfterRebaseForMovingFromOldSource:(id)arg1 toNewSource:(id)arg2 committingItem:(id)arg3 ;
-(unsigned long long)invitationStatus;
-(BOOL)allowsSpansOtherThanThisEvent;
-(BOOL)allowsCalendarModifications;
-(BOOL)allowsRecurrenceModifications;
-(BOOL)allowsAlarmModifications;
-(BOOL)allowsAttendeesModifications;
-(void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2 ;
-(id)startDateForRecurrence;
-(int)externalTrackingStatus;
-(void)_willCommit;
-(unsigned long long)cachedJunkStatus;
-(void)clearDetectedConferenceURL;
-(id)conferenceURLDetected;
-(id)_detectConferenceURL;
-(id)_prioritizedConferencesSources;
-(BOOL)_hasChangesForConferenceURLDetection;
-(NSString *)recurrenceSet;
-(void)_updateConferenceURL;
-(BOOL)_canWriteConferenceURL;
-(void)setIsJunk:(BOOL)arg1 shouldSave:(BOOL)arg2 ;
-(void)setCachedJunkStatus:(unsigned long long)arg1 ;
-(BOOL)_couldBeJunkCommon;
-(NSArray *)locationsWithoutPrediction;
-(void)setNotesCommon:(id)arg1 ;
-(void)setURLCommon:(id)arg1 ;
-(id)conferenceURLForDisplay;
-(void)updateConferenceURLIfNeeded;
-(NSString *)sendersEmail;
-(NSString *)sendersPhoneNumber;
-(BOOL)isMasterOrDetachedOccurrence;
-(BOOL)isStartDateDirty;
-(BOOL)isEndDateDirty;
-(void)setResponseComment:(id)arg1 ;
-(void)setRecurrenceRule:(id)arg1 ;
-(NSDate *)occurrenceDate;
-(void)setFiredTTL:(BOOL)arg1 ;
-(double)duration;
-(id)adjustedPersistedDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2 ;
-(BOOL)isPhantom;
-(BOOL)needsOccurrenceCacheUpdate;
-(NSURL *)externalURL;
-(BOOL)attendeeReplyChanged;
-(long long)participationStatus;
-(void)setParticipationStatus:(long long)arg1 ;
-(id)initWithEventStore:(id)arg1 ;
-(BOOL)firedTTL;
-(void)setExternalTrackingStatus:(int)arg1 ;
-(void)rollback;
-(BOOL)supportsJunkReporting;
-(void)setJunkStatus:(unsigned long long)arg1 ;
-(id)title;
-(void)setBirthdayContact:(id)arg1 ;
-(BOOL)isEqual:(id)arg1 ;
-(void)setLunarCalendarString:(id)arg1 ;
-(long long)status;
-(NSDate *)recurrenceDate;
-(id)_nsCalendar;
@end

