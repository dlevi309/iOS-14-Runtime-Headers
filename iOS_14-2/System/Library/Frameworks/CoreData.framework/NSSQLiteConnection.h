/*
* Generated on Thursday, January 14, 2021 at 2:21:11 PM Pacific Standard Time
* Operating System: Version 14.2 (Build 18B92)
* Image Source: /System/Library/Frameworks/CoreData.framework/CoreData
*/


@protocol OS_dispatch_queue;
#import <CoreData/CoreData-Structs.h>
@class NSObject, NSSQLCore, NSURL, NSString, NSSQLiteStatement, NSArray, NSSQLEntity, NSMutableDictionary, NSMutableSet, NSMutableArray, NSSQLSaveChangesRequestContext, NSSQLitePrefetchRequestCache;

@interface NSSQLiteConnection : NSObject {

	NSObject*<OS_dispatch_queue> _queue;
	NSSQLCore* _sqlCore;
	NSURL* _workingURL;
	NSString* _dbPath;
	BOOL _transactionIsOpen;
	BOOL _transactionIsCurrentlyReadOnly;
	BOOL _useSyntaxColoredLogging;
	NSSQLiteStatement* _sqlStatement;
	NSArray* _columnsToFetch;
	NSArray* _metadataColumns;
	sqlite3Ref _db;
	sqlite3_stmtRef _vmstatement;
	int _rowsProcessedCount;
	unsigned _lastEntityKey;
	NSSQLEntity* _finalEntity;
	NSSQLEntity* _lastEntity;
	sqlite3_stmtRef _fetchPKStatement;
	sqlite3_stmtRef _updatePKStatement;
	NSSQLiteStatement* _beginStatement;
	NSSQLiteStatement* _commitStatement;
	NSSQLiteStatement* _rollbackStatement;
	CFDictionaryRef _vmCachedStatements;
	NSMutableDictionary* _pragmaSettings;
	NSMutableSet* _mObjectIDsUpdatedByTriggers;
	NSMutableArray* _mObjectIDsInsertedByDATriggers;
	NSMutableArray* _mObjectIDsUpdatededByDATriggers;
	NSSQLSaveChangesRequestContext* _saveRequest;
	CFDictionaryRef _statementCachesByEntity;
	NSSQLitePrefetchRequestCache* _prefetchRequestCache;
	CFDictionaryRef _cachedEntityUpdateStatements;
	CFDictionaryRef _cachedEntityConstrainedValuesUpdateStatements;
	double _timeOutOption;
	double _timeOutIncrement;
	void** _extraBuffersForRegisteredFunctions[5];
	NSString* _dbPathRegisteredWithBackupd;
	long long _vacuumTracker;
	NSMutableArray* _temporaryTables;
	struct {
		unsigned _readyToBind : 1;
		unsigned _fetchInProgress : 1;
		unsigned _fileSystemType : 2;
		unsigned _proxyLocking : 1;
		unsigned _vacuumSetupNeeded : 1;
		unsigned _usingWAL : 1;
		unsigned _disallowReconnect : 1;
		unsigned _isWriter : 1;
		unsigned _didSnapshotRecovery : 1;
		unsigned _hasTransactionStringTable : 1;
		unsigned _isQueryGenTracking : 1;
		unsigned _reserved : 20;
	}  _sqliteConnectionFlags;
	unsigned long long _debugInode;
	NSMutableArray* _activeGenerations;
	NSMutableDictionary* _transactionStringName;
	NSMutableDictionary* _usedIndexes;

}

@property (assign,nonatomic) BOOL isWriter; 
+(void)initialize;
+(void)__INode_Changed_AllThatIsLeftToUsIsHonor__;
+(int)openAtPath:(const char*)arg1 withKey:(id)arg2 handle:(sqlite3*)arg3 flags:(int)arg4 module:(const char*)arg5 checkpointOnClose:(BOOL)arg6 ;
+(const char*)_databaseOpenURLStringForURL:(id)arg1 ;
+(BOOL)_replacePersistentStoreAtURL:(id)arg1 destinationOptions:(id)arg2 withPersistentStoreFromURL:(id)arg3 sourceOptions:(id)arg4 error:(id*)arg5 ;
+(int)readMagicWordFromPath:(const char*)arg1 options:(id)arg2 ;
+(BOOL)_rekeyPersistentStoreAtURL:(id)arg1 options:(id)arg2 withKey:(id)arg3 error:(id*)arg4 ;
+(void)_setDebugFlags:(int)arg1 ;
+(BOOL)_destroyPersistentStoreAtURL:(id)arg1 options:(id)arg2 error:(id*)arg3 ;
-(void)execute;
-(int)freeQueryGenerationWithIdentifier:(id)arg1 ;
-(void)disconnect;
-(void)cacheUpdateConstrainedValuesStatement:(id)arg1 forEntity:(id)arg2 ;
-(void)createMissingHistoryTables;
-(id)_createTransactionStringWithName:(id)arg1 ;
-(void)beginTransaction;
-(id)_createTableStatementsForEntities:(id)arg1 ;
-(id)fetchTableCreationSQLContaining:(id)arg1 ;
-(void)transactionDidRollback;
-(id)initForSQLCore:(id)arg1 ;
-(void)_restoreBusyTimeOutSettings;
-(void)processUpdateRequest:(id)arg1 withOIDs:(id)arg2 forAttributes:(id)arg3 ;
-(void)_dropOldHistoryTrackingTablesV1;
-(sqlite3_stmtRef)_vmstatement;
-(void)_ensureNoStatementPrepared;
-(BOOL)hasHistoryTransactionWithNumber:(id)arg1 ;
-(void)_forceDisconnectOnError;
-(id)_dropTableStatementsForTempOfEntities:(id)arg1 ;
-(void)endFetchAndRecycleStatement:(BOOL)arg1 ;
-(BOOL)_hasTableWithName:(id)arg1 isTemp:(BOOL)arg2 ;
-(void)dropUbiquityTables;
-(unsigned long long)pagesInStore;
-(void)insertUpdates:(id)arg1 transactionID:(long long)arg2 updatedAttributes:(id)arg3 ;
-(BOOL)_hasTableWithName:(id)arg1 ;
-(BOOL)registerMigrationUpdateFunctionWithMigrator:(id)arg1 ;
-(id)_tempNameForTableName:(id)arg1 ;
-(id)fetchUbiquityKnowledgeVector;
-(id)createArrayOfPrimaryKeysAndEntityIDsForRowsWithoutRecordMetadataWithEntity:(id)arg1 metadataEntity:(id)arg2 ;
-(void)cacheCurrentDBStatementOn:(id)arg1 ;
-(void)_registerExtraFunctions;
-(BOOL)finishDeferredLightweightMigration:(BOOL)arg1 ;
-(id)createSetOfObjectIDsInsertUpdatedByDATriggers;
-(void)addPeerRangeForPeerID:(id)arg1 entityName:(id)arg2 rangeStart:(id)arg3 rangeEnd:(id)arg4 peerRangeStart:(id)arg5 peerRangeEnd:(id)arg6 ;
-(void)clearPrefetchRequestCache;
-(id)_lastInsertRowID;
-(void)updateUbiquityKnowledgeVector:(id)arg1 ;
-(BOOL)hasIndexTrackingTable;
-(id)_createInsertStatementsForEntities:(id)arg1 ;
-(void)processSaveRequest:(id)arg1 ;
-(BOOL)isOpen;
-(id)fetchCachedModel;
-(void)prepareAndExecuteSQLStatement:(id)arg1 ;
-(void)prepareInsertStatementForEntity:(id)arg1 includeConstraints:(BOOL)arg2 includeOnConflict:(BOOL)arg3 ;
-(id)indexesUsedByStatement:(id)arg1 ;
-(id)_compressedDataWithModel:(id)arg1 ;
-(void)cacheUpdateStatement:(id)arg1 forEntity:(id)arg2 andDeltasMask:(CFBitVectorRef)arg3 ;
-(void)addPeerRange:(id)arg1 ;
-(void)_configureAutoVacuum;
-(unsigned long long)insertManagedObjectBlock:(/*^block*/id)arg1 forEntity:(id)arg2 includeOnConflict:(BOOL)arg3 ;
-(void)updateUbiquityKnowledgeForPeerWithID:(id)arg1 andTransactionNumber:(id)arg2 ;
-(void)_bindVariablesWithInsertedRow:(id)arg1 ;
-(void)triggerUpdatedRowInTable:(const char*)arg1 withEntityID:(long long)arg2 primaryKey:(long long)arg3 columnName:(const char*)arg4 newValue:(long long)arg5 ;
-(void)_bindVariablesWithUpdatedRow:(id)arg1 andOriginalRow:(id)arg2 forDeltasMask:(CFBitVectorRef)arg3 ;
-(void)_clearBindVariablesForConstrainedValuesUpdateStatement:(id)arg1 ;
-(void)clearObjectIDsUpdatededByDATriggers;
-(id)createMapOfEntityNameToPKMaxForEntities:(id)arg1 ;
-(long long)_fetchMaxPrimaryKeyForEntity:(id)arg1 ;
-(id)prefetchRequestCache;
-(void)saveCachedModel:(id)arg1 ;
-(BOOL)databaseIsEmpty;
-(void)rollbackTransaction;
-(id)harvestUsedIndexes;
-(void)connect;
-(void)releaseSQLStatement;
-(void)derivedAttributeUpdatedInsertedRowInTable:(const char*)arg1 withEntityID:(long long)arg2 primaryKey:(long long)arg3 columnName:(const char*)arg4 newValue:(id)arg5 ;
-(void)performAndWait:(/*^block*/id)arg1 ;
-(void)commitTransaction;
-(void)willCreateSchema;
-(BOOL)setUpIndexTracking;
-(void)clearObjectIDsUpdatedByTriggers;
-(id)processRelationshipUpdates:(id)arg1 forRequestContext:(id)arg2 ;
-(void)_bindVariablesForConstrainedValuesWithRow:(id)arg1 ;
-(void)_clearTransactionCaches;
-(id)_decompressedModelWithData:(id)arg1 ;
-(void)executeCorrelationChangesForValue1:(unsigned long long)arg1 value2:(unsigned long long)arg2 value3:(unsigned long long)arg3 value4:(unsigned long long)arg4 ;
-(BOOL)hasOpenTransaction;
-(id)allPeerRanges;
-(void)setSecureDeleteMode:(BOOL)arg1 ;
-(void)bindTempTableForBindIntarray:(id)arg1 ;
-(int)_rowsChangedByLastExecute;
-(id)gatherObjectIDsAndAttributeNamesFromTable:(id)arg1 ;
-(void)createMetadata;
-(void)createIndexesForEntity:(id)arg1 ;
-(void)_endFetch;
-(int)fetchBufferResultSet:(void*)arg1 usingFetchPlan:(id)arg2 ;
-(void)_performPostSaveTasks:(BOOL)arg1 andForceFullVacuum:(BOOL)arg2 ;
-(id)ubiquityTableValueForKey:(id)arg1 ;
-(void)createTablesForEntities:(id)arg1 ;
-(BOOL)_hasHistoryTransactionStringTable;
-(id)fetchTableNames;
-(void)dropIndexTrackingTable;
-(id)fetchMetadata;
-(id)_entitiesWithDeferredMigration;
-(int)registerCurrentQueryGenerationWithStore:(id)arg1 ;
-(void)createTableForEntity:(id)arg1 ;
-(void)resetSQLStatement;
-(id)createMapOfEntityNameToPKMaxForEntitiesFromPKTable:(id)arg1 ;
-(void)_bindVariablesWithDeletedRow:(id)arg1 ;
-(BOOL)_useContextObjects;
-(unsigned long long)_countOfVMCachedStatements;
-(void)bindTempTablesForStatementIfNecessary:(id)arg1 ;
-(void)_dropAllTriggers;
-(BOOL)hasAttributeChanges:(id)arg1 ;
-(BOOL)_isQueryGenerationTrackingConnection;
-(id)_insertTransactionStringsForRequestContext:(id)arg1 ;
-(void)processExternalDataReferenceFilesDeletedByRequest:(id)arg1 ;
-(void)insertRow:(id)arg1 ;
-(int)_adoptQueryGenerationWithSnapshot:(id)arg1 ;
-(id)createSetOfObjectIDsUpdatedByTriggers;
-(BOOL)hasPrimaryKeyTable;
-(void)_configurePageSize;
-(BOOL)_hasOldHistoryTrackingTablesV0;
-(void)createPrimaryKeyTableForModel:(id)arg1 knownEmpty:(BOOL)arg2 ;
-(long long)_insertTransactionForRequestContext:(id)arg1 andStrings:(id)arg2 ;
-(BOOL)_hasTempTableWithName:(id)arg1 ;
-(void)processDeleteRequest:(id)arg1 ;
-(int)rowsChangedByLastStatement;
-(id)connectionManager;
-(int)_registerNewQueryGenerationSnapshot:(id)arg1 ;
-(id)executeMulticolumnUniquenessCheckSQLStatement:(id)arg1 returningColumns:(id)arg2 ;
-(void)_dropAllDATriggers;
-(BOOL)hasHistoryRows;
-(id)fetchCreationSQLForType:(id)arg1 containing:(id)arg2 ;
-(id)hasAncillaryEntitiesInHistory;
-(int)logQueryPlanForStatement:(id)arg1 ;
-(BOOL)hasTransactionStringColumnsInTransactionTable;
-(BOOL)isLocalFS;
-(id)currentQueryGenerationIdentifier;
-(void)processMigrationRequestForHash:(id)arg1 ;
-(id)metadataColumns;
-(long long)_getCurrentAutoVacuumValue;
-(id)cachedUpdateStatementForEntity:(id)arg1 andDeltasMask:(CFBitVectorRef)arg2 ;
-(BOOL)isFetchInProgress;
-(void)configureUbiquityMetadataTable;
-(id)adapter;
-(long long)_countOfRowsInTable:(id)arg1 ;
-(id)statementCacheForEntity:(id)arg1 ;
-(void)setUbiquityTableValue:(id)arg1 forKey:(id)arg2 ;
-(void)uncacheVMStatement:(id)arg1 ;
-(BOOL)hasMetadataTable;
-(void)_executeSQLString:(id)arg1 ;
-(id)fetchTriggerCreationSQL;
-(id)createSetOfObjectIDsUpdatedByDATriggers;
-(BOOL)_dropTableWithName:(id)arg1 ;
-(void)_finalizeStatement;
-(BOOL)_tableHasRows:(id)arg1 ;
-(void)selectRowsWithStatement:(id)arg1 cached:(BOOL)arg2 ;
-(void)_ensureDatabaseOpen;
-(void)_clearOtherStatements;
-(void)_clearCachedStatements;
-(unsigned long long)numberOfTombstones;
-(void*)_buffersForRegisteredFunctions;
-(void)_dropKnownHistoryTrackingTables;
-(void)_setupVacuumIfNecessary;
-(void)insertBatchDeleteChangesForTransactionID:(long long)arg1 ;
-(id)ubiquityTableKeysAndValues;
-(void)_dropOldHistoryTrackingTablesV0;
-(void)_configureSynchronousMode;
-(int)adoptQueryGenerationWithIdentifier:(id)arg1 ;
-(id)fetchTableCreationSQL;
-(void)processInsertRequest:(id)arg1 withOIDs:(id)arg2 ;
-(BOOL)addTransactionStringColumnsToTransactionTable;
-(unsigned long long)pagesUsedByTables:(id)arg1 ;
-(id)_alterTableStatementsForEntities:(id)arg1 ;
-(BOOL)canConnect;
-(void)_configureIntegrityCheck;
-(void)insertChanges:(id)arg1 type:(long long)arg2 transactionID:(long long)arg3 context:(id)arg4 ;
-(void)_validateProperty:(id)arg1 withValue:(id)arg2 ;
-(unsigned long long)insertDictionaryBlock:(/*^block*/id)arg1 forEntity:(id)arg2 includeOnConflict:(BOOL)arg3 ;
-(void)createTriggersForEntities:(id)arg1 ;
-(void)_clearSaveRequest;
-(void)replaceUbiquityKnowledgeVector:(id)arg1 ;
-(void)writeCorrelationInsertsFromTracker:(id)arg1 ;
-(void)_clearSaveGeneratedCachedStatements;
-(void)setExclusiveLockingMode:(BOOL)arg1 ;
-(void)setIsWriter:(BOOL)arg1 ;
-(void)writeCorrelationReordersFromTracker:(id)arg1 ;
-(id)columnsToFetch;
-(id)newFetchUUIDSForSubentitiesRootedAt:(id)arg1 ;
-(id)executeAttributeUniquenessCheckSQLStatement:(id)arg1 returningColumns:(id)arg2 ;
-(void)dropHistoryTrackingTables;
-(void)_performBlock:(/*^block*/id)arg1 ;
-(void)_ensureNoTransactionOpen;
-(void)writeCorrelationMasterReordersFromTracker:(id)arg1 ;
-(void)transactionDidBegin;
-(id)reopenQueryGenerationWithIdentifier:(id)arg1 error:(id*)arg2 ;
-(void)handleCorruptedDB:(id)arg1 ;
-(void)writeCorrelationChangesFromTracker:(id)arg1 ;
-(void)_configurePragmaOptions:(int)arg1 createdSchema:(BOOL)arg2 ;
-(void)createCachedModelTable;
-(void)_clearBindVariablesForUpdateStatement:(id)arg1 forDeltasMask:(CFBitVectorRef)arg2 ;
-(void)_setSaveRequest:(id)arg1 ;
-(id)_transactionsStringAndPKsForStrings:(id)arg1 ;
-(id)sqlStatement;
-(void)updateRow:(id)arg1 forRequestContext:(id)arg2 ;
-(BOOL)hasCachedModelTable;
-(void)beginReadTransaction;
-(void)forceTransactionClosed;
-(void)didCreateSchema;
-(id)_checkActiveGenerationsForIdentfier:(id)arg1 ;
-(int)registerCurrentQueryGenerationWithStore:(id)arg1 retries:(unsigned long long)arg2 ;
-(void)_batchInsertThrowWithErrorCode:(int)arg1 andMessage:(id)arg2 forKey:(id)arg3 andValue:(id)arg4 additionalDetail:(id)arg5 ;
-(id)_currentQueryGenerationSnapshot:(id*)arg1 ;
-(id)_insertTransactionStringForMigrationAuthor:(id)arg1 ;
-(void)writeCorrelationDeletesFromTracker:(id)arg1 ;
-(long long)_ensureWalFileExists;
-(void)createManyToManyTablesForEntity:(id)arg1 ;
-(void)setColumnsToFetch:(id)arg1 ;
-(unsigned long long)percentageUsedByPersistentHistory;
-(id)gatherObjectIDsFromTable:(id)arg1 ;
-(long long)fetchMaxPrimaryKeyForEntity:(id)arg1 ;
-(BOOL)_hasSaveRequest;
-(void)insertBatchInserts:(id)arg1 transactionID:(long long)arg2 ;
-(void)createSchema;
-(void)_dropOldHistoryTrackingTables;
-(id)_newValueForColumn:(id)arg1 atIndex:(unsigned)arg2 inStatement:(sqlite3_stmtRef)arg3 ;
-(id)newFetchedArray;
-(void)prepareInsertStatementForAncillaryEntity:(id)arg1 ;
-(void)_ensureNoFetchInProgress;
-(BOOL)deleteRow:(id)arg1 forRequestContext:(id)arg2 ;
-(BOOL)_hasOldHistoryTrackingTablesV1;
-(int)fetchResultSet:(void*)arg1 usingFetchPlan:(id)arg2 ;
-(BOOL)isWriter;
-(void)saveMetadata:(id)arg1 ;
-(id)_createInsertStatementForEntity:(id)arg1 ;
-(void)_clearBindVariablesForInsertedRow;
-(void)clearObjectIDsInsertUpdatededByDATriggers;
-(id)initAsQueryGenerationTrackingConnectionForSQLCore:(id)arg1 ;
-(void)transactionDidCommit;
-(void)addVMCachedStatement:(id)arg1 ;
-(id)cachedUpdateConstrainedValuesStatmentForEntity:(id)arg1 ;
-(BOOL)_hasOldHistoryTrackingTables;
-(long long)generatePrimaryKeysForEntity:(id)arg1 batch:(unsigned)arg2 ;
-(BOOL)selectCountWithStatement:(id)arg1 ;
-(BOOL)_hasPersistentHistoryTables;
-(void)dropHistoryBeforeTransactionID:(id)arg1 ;
-(void)derivedAttributeUpdatedRowInTable:(const char*)arg1 withEntityID:(long long)arg2 primaryKey:(long long)arg3 columnName:(const char*)arg4 newValue:(id)arg5 ;
-(void)insertReorderUpdates:(id)arg1 transactionID:(long long)arg2 context:(id)arg3 ;
-(id)createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:(id)arg1 ;
-(void)prepareSQLStatement:(id)arg1 ;
-(id)transactionStringForName:(id)arg1 ;
-(void)dealloc;
-(CFArrayRef)copyRawIntegerRowsForSQL:(id)arg1 ;
-(unsigned long long)insertArray:(id)arg1 forEntity:(id)arg2 includeOnConflict:(BOOL)arg3 ;
-(id)fetchIndexCreationSQL;
-(BOOL)recreateIndices;
-(BOOL)performIntegrityCheck;
-(void)updateConstrainedValuesForRow:(id)arg1 ;
-(BOOL)addTombstoneColumnsForRange:(NSRange)arg1 ;
@end

